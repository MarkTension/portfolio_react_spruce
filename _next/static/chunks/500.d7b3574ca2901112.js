"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[500],{9500:function(e,t,i){i.r(t),t.default="# Hierarchical BOIDS and a theoretical model for consciousness\n\n<p align=\"center\">\n<img width= \"40%\" src=\"/images/blogHeaders/kubok.webp\" alt=\"kuboktaeder\">\n</p>\n\nThis is a research idea that's been keeping me very occupied lately. It continues on my earlier post on [how to simulate an order of magnitude more boids](https://marktension.nl/blog/order-of-magnitude-boids/). It's a quite different approach based on hierarchy, but I really like it as an analogy for how I think about consciousness.\n\nIt all started with a conversation with my Escher Think co-founder Bas on information systems and programming languages. We touched upon the power of hierarchy in information systems.\n\nSpecifically, we talked about hierarchy in the Erlang programming language (which recently gained more popularity since Whatsapp was built with it). I learned that it consists of many concurrent, isolated processes that don't  share state, but instead pass messages to another. \n\nSo far it sounds a lot like concurrent threads in e.g. GPU workloads. But in Erlang, a processes can either be a worker or supervisor. An Erlang program has many processes and is organized hieararchically like a tree. The tree consist of sets of processes being overseen by supervisors, which can in turn be overseen by higher level supervisors. That way workers can send messages up to supervisors, which have logic implemented to react. \n\nI like how this hierarchy is analogous to how cognition in biology works as well, with mechanisms like predicitive coding, CarlFriston's Free Energy principle and e.g. the visual pathway in the brain.\n\nNow to BOIDS. During the conversation I started thinking about a question I've been having about artificial life. \n\nArtificial life, like boids, or Cellular Automata is so cool because emergent phenomena arise from agents (isolated concurrent processes) interacting with another and following rules. \n\nOne problem is that I never seem to be able to take my visualizations to the 'next level of complexity'. You can tweak the rules/starting state a lot, and it would change their behavior, but it won't necessarily give an objective to the flock. \n\nI guess this research is already largely done by the epic Steven Wolfram's CA experiments. He researched complex CA systems which can give emergence to compute. Especially significant is his [rule 110](https://en.wikipedia.org/wiki/Rule_110), which can result in turing complete CA. Same can be said about the famous Conway's game of life, which is also CA and turing complete. [Here's a tutorial](https://www.nicolasloizeau.com/gol-computer) on how to build a computer with Game of Life. You build it by coming up with the various logic gates necessary, and abstract them to build more complex parts on it.\n\nNevertheless, despite having a system that can be turing complete, who's going to build the computer with it? Having an outsider intelligent system (human) to build it is a bit of a hack in answering this question. Maybe it's an argument for intelligent design haha. The more interesting question is: how does the system bootstrap itself? The system needs to give rise to a higher level of organization that has its own objective. It needs to use abstracted lower-level phenomena (like Conway's logic gates) into a sensible configurations which empowers itself to reach its own objective. It needs agency, just like how you as human experiences agency on your level of organization. Each cell in each level of organization having its own local objective (through rules) is key hear I think. It can be all purely functional, without having state, as long as it takes a lower level signal.\n\nNeural Cellular Automata (NCA) is interesting in this scope as it's the perfect way to find rules, but if it's not hierarchical, it will stay with superficial pattern formation. It's relevant to me as a tool for rule discovery, which will be super important in this research.\n\nGrowing more layers on top of eachother into increasingly complex systems is the goal to evolve intelligence. It would be especially elegant if that is a recursive process which can be put into a simple function. That would respect Occam's Razor. I'm not sure what that this be for a general case, but for BOIDS I have a fun and fractal idea for this.\n\n\n\n"}}]);